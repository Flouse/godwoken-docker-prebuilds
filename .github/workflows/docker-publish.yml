name: Docker

on:
  # build image by develop branch nightly
  schedule:
  - cron: '50 10 * * *'
  push:
    branches: [ main, 'develop*', 'v0.*']
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ${{ github.repository_owner != 'nervosnetwork' && 'ghcr.io/' || '' }}
  IMAGE_NAME: godwoken-prebuilds


jobs:
  docker-build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_name: ${{ steps.lowercase-image-name.outputs.lowercase_image_name }}
      image_tag: ${{ steps.meta.outputs.version }}
      meta_json: ${{ steps.meta.outputs.json }}
      # bake-file: ${{ steps.meta.outputs.bake-file }}
      image_digest: ${{ steps.build-push-ghcr.outputs.digest || steps.build-push-dockerhub.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      - name: Install Rust components
        run: rustup component add rustfmt && rustup component add clippy
      - name: Install moleculec
        run: |
          test "$(moleculec --version)" = "Moleculec 0.7.2" \
          || CARGO_TARGET_DIR=target/ cargo install moleculec --version 0.7.2 --force
      - name: Install capsule
        env:
          CAPSULE_VERSION: v0.7.0
        run: |
          (which capsule && test "$(capsule --version)" = "Capsule 0.7.0") \
          || curl -OL https://github.com/nervosnetwork/capsule/releases/download/${CAPSULE_VERSION}/capsule_${CAPSULE_VERSION}_x86_64-linux.tar.gz \
          && tar xf capsule_${CAPSULE_VERSION}_x86_64-linux.tar.gz \
          && mv capsule_${CAPSULE_VERSION}_x86_64-linux/capsule ~/.cargo/bin/
          capsule --version

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      # The GHP_CRT secret is password or personal access token with `write:packages` access scope
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME || github.actor }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.GHP_CRT }}

      # repository name must be lowercase
      - name: conver image_name to lowercase
        id: lowercase-image-name
        env:
          TMP_IMAGE_NAME: ${{ env.REGISTRY }}${{ github.repository_owner == 'nervosnetwork' && 'nervos' || github.repository_owner }}/${{ env.IMAGE_NAME }}
        run: |
          echo "TMP_IMAGE_NAME=${{ env.TMP_IMAGE_NAME }}"
          echo "::set-output name=lowercase_image_name::$(echo ${{ env.TMP_IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')"

# echo "lowercase_image_name=$(echo ${{ env.TMP_IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV


      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.lowercase-image-name.outputs.lowercase_image_name }}
          # dynamically set date as a suffix
          tags: |
            type=ref,event=branch,suffix=-{{date 'YYYYMMDDHHmm'}}
        # TODO: add godwoken_ref, gw_scripts_ref and polyjuice_ref into image meta data

      # - name: build
      #   run: make build-components

      # # Build and push Docker image with Buildx (don't push on PR)
      # # https://github.com/docker/build-push-action
      # - id: build-push-ghcr
      #   name: Build and push Docker image to ${{ env.REGISTRY }}${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
      #   if: ${{ github.repository_owner != 'nervosnetwork' }}
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}

      # # Build and push Docker image with Buildx (don't push on PR)
      # # only for new tag
      # - id: build-push-dockerhub
      #   name: Build and push Docker image to https://hub.docker.com/r/nervos/godwoken-prebuilds
      #   if: ${{ github.repository_owner == 'nervosnetwork' && startsWith(github.ref, 'refs/tags') }}
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}

      # - name: Check versions of the binaries used by Godwoken
      #   run: |
      # FIXME: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by godwoken)
      #     docker run --rm godwoken-prebuilds godwoken --version
      #     docker run --rm godwoken-prebuilds gw-tools --version
      ###
      #     docker run --rm godwoken-prebuilds ckb --version
      #     docker run --rm godwoken-prebuilds ckb-cli --version
      #     docker run --rm godwoken-prebuilds ckb-indexer --version
      #     docker run --rm godwoken-prebuilds find /scripts

      # - name: debug-outputs
      #   run: |

  debug-outputs:
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
    - name: print-outputs
      run: |
        echo "docker-build-push outputs: ${{ toJSON(needs.docker-build-push.outputs) }}"
      
  integration-test:
    needs: docker-build-push
    uses: nervosnetwork/godwoken-tests/.github/workflows/reusable-integration-test.yml@reusable_workflow
    with:
      gw_prebuild_image_name: ${{ needs.docker-build-push.outputs.image_name }}
      gw_prebuild_image_tag: ${{ needs.docker-build-push.outputs.image_tag }}
      # gw_prebuild_image_digest: ${{ needs.docker-build-push.outputs.image_digest }}